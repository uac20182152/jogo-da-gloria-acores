[{"C:\\Users\\iTTaste\\Desktop\\TW\\gloria-react\\src\\index.js":"1"},{"size":52014,"mtime":1610935439363,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"9u0kp2","C:\\Users\\iTTaste\\Desktop\\TW\\gloria-react\\src\\index.js",["7","8","9","10","11","12","13","14","15","16","17","18","19","20","21"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Draggable from 'react-draggable';\r\nimport './index.css';\r\n\r\n\r\nclass Tile extends React.Component {\r\n\r\n    render() {\r\n        let backgroundImage = this.props.backgroundImage;\r\n        let id = \"tile\" + this.props.number;\r\n        let number = this.props.number;\r\n        let chestImage = this.props.chestImage;\r\n        return (\r\n            <div\r\n                id={id} className=\"tile\"\r\n                style={{\r\n                    backgroundImage: 'url(./images/' + backgroundImage + ')'\r\n                }}\r\n            >\r\n                <div\r\n                    id={id + \"A\"}\r\n                    className=\"playerSlot playerASlot\"\r\n                    style={ /*(this.props.occupiedByPlayerA) ?\r\n                        {backgroundImage: 'url(./images/playerA.png)'} :\r\n                        {}*/ {}\r\n                    }\r\n                >\r\n                    <div\r\n                        id={id + \"B\"}\r\n                        className=\"playerSlot playerBSlot\"\r\n                        style={ /*(this.props.occupiedByPlayerB) ?\r\n                            {backgroundImage: 'url(./images/playerB.png)'} :\r\n                            {}*/ {}\r\n                        }\r\n                    >\r\n                        <div\r\n                            className=\"numberDiv\"\r\n                            style={{backgroundImage: 'url(./images/' + chestImage+ ')'}}\r\n                        >\r\n                            <span\r\n                                className=\"numberSpan\"\r\n                            >\r\n                                &nbsp;{number}\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Board extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.normalTileImages = ['tile0.png', 'tile1.png', 'tile2.png'];\r\n        this.normalTileImageIndexes = Array(this.props.numberOfTiles)\r\n            .fill(0)\r\n            .map(x => Math.floor(Math.random() * this.normalTileImages.length));\r\n\r\n\r\n    }\r\n\r\n    renderTile(number, chestColor=null) {\r\n        let isTaskTile = (number in this.props.taskTiles);\r\n        let isChestTile = (number in this.props.chestTiles);\r\n        let backgroundImage;\r\n\r\n        if (!isTaskTile) {\r\n            backgroundImage = this.normalTileImages[this.normalTileImageIndexes[number - 1]];\r\n        } else {\r\n            backgroundImage = this.props.taskTiles[number].backgroundImage;\r\n        }\r\n\r\n\r\n        return (\r\n            <Tile\r\n                number={number}\r\n                backgroundImage={backgroundImage}\r\n                occupiedByPlayerA={this.props.playerATile === number}\r\n                occupiedByPlayerB={this.props.playerBTile === number}\r\n                chestImage={(isChestTile) ? this.props.chestTiles[number].chest.image : null}\r\n\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n\r\n        let tiles = [];\r\n        for (let i = 1; i < (this.props.numberOfTiles + 1); i++) {\r\n            tiles.push(this.renderTile(i));\r\n        }\r\n\r\n        return (\r\n            <div id=\"boardTiles\">\r\n                {tiles}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.getElementById(\"tile1A\").style.backgroundImage = 'url(\"images/playerA.png\")';\r\n        document.getElementById(\"tile1B\").style.backgroundImage = 'url(\"images/playerB.png\")';\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.playerATile !== this.props.playerATile || prevProps.playerBTile !== this.props.playerBTile) {\r\n            let character = (prevProps.playerATile !== this.props.playerATile) ? \"A\" : \"B\";\r\n            let currentPos = prevProps[\"player\" + character + \"Tile\"];\r\n            await new Promise(resolve => setTimeout(resolve, 500));\r\n            for (let i = 0; i < this.props.lastDiceValue; i++) {\r\n                document.getElementById(\"tile\" + currentPos + character).style.backgroundImage = null;\r\n                currentPos = (currentPos >= this.numberOfTiles) ? 1 : (currentPos + 1);\r\n                document.getElementById(\"tile\" + currentPos + character).scrollIntoView(false);\r\n                document.getElementById(\"tile\" + currentPos + character).style.backgroundImage = 'url(\"images/player' + character + '.png\")';\r\n                await new Promise(resolve => setTimeout(resolve, 400));\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\nfunction PlayerInventory(props) {\r\n    return (\r\n        <ul\r\n            id={\"player\" + props.char + \"Inventory\"}\r\n            className=\"dropdown-menu\"\r\n            aria-labelledby={\"navbarDropdown\" + props.char}\r\n        >\r\n            {/********************************************************************************************************/}\r\n            {/* props.playerInventory tem a estrutura  {name: quantity,}.\r\n             as suas entries [name, quantity] terão o nome nameQuantity */}\r\n            {\r\n                (Object.keys(props.playerInventory).length === 0) ?\r\n                    [\"Vazio!\", \"Os itens comprados na loja aparecerão aqui.\"].map(\r\n                        (text, index) =>\r\n                            <li className=\"inventoryItem\" key={index}>{text}</li>\r\n                    ) :\r\n                    Object.entries(props.playerInventory).map(\r\n                        (nameQuantity, index) =>\r\n                            <li className=\"inventoryItem\" href=\"#\" key={index}>\r\n                                <img src={\"images/shop/\" + props.shopInventory[nameQuantity[0]].image}/>\r\n                                &nbsp;x&nbsp;{nameQuantity[1]}&nbsp;{nameQuantity[0]}\r\n                            </li>\r\n                    )\r\n            }\r\n            {/********************************************************************************************************/}\r\n        </ul>\r\n    );\r\n}\r\n\r\nclass PlayerStatus extends React.Component {\r\n    render() {\r\n        let char = this.props.character;\r\n        let playerChar = 'player' + char;\r\n\r\n        let lives = Array(this.props.lives)\r\n            .fill(null)\r\n            .map((_) => <img src=\"images/life.png\" alt=\"life\" height=\"32px\"/>);\r\n\r\n        return (\r\n            <nav\r\n                id={playerChar + \"Status\"}\r\n                className={\"navbar navbar-expand-lg navbar-dark playerStatus \" +\r\n                ((char === \"A\") ? \"bg-danger \" : \"bg-primary \") +\r\n                ((this.props.belongsToCurrentPlayer) ? \"d-table-cell\" : \"d-none d-lg-table-cell\")}\r\n\r\n            >\r\n                <div className=\"container-fluid\">\r\n                    <a\r\n                        id={playerChar + \"Name\"}\r\n                        className=\"navbar-brand\"\r\n                        href=\"#\"\r\n                    >\r\n                        {this.props.name}\r\n                    </a>\r\n                    <button\r\n                        className=\"navbar-toggler\"\r\n                        type=\"button\"\r\n                        data-bs-toggle=\"collapse\"\r\n                        data-bs-target={\"#navbarSupportedContent\" + char}\r\n                        aria-controls={\"navbarSupportedContent\" + char}\r\n                        aria-expanded=\"false\"\r\n                        aria-label=\"Toggle navigation\"\r\n                    >\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div\r\n                        className=\"collapse navbar-collapse\"\r\n                        id={\"navbarSupportedContent\" + char}\r\n                    >\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\" key=\"lives\">\r\n                                <a id={playerChar + \"Lives\"}\r\n                                   className=\"nav-link active\"\r\n                                   aria-current=\"page\"\r\n                                   href=\"#\"\r\n                                >\r\n                                    <div>\r\n                                        {lives}\r\n                                    </div>\r\n\r\n                                </a>\r\n                            </li>\r\n\r\n                            <li className=\"nav-item dropdown\" key=\"inventory\">\r\n                                <a\r\n                                    className=\"nav-link dropdown-toggle\"\r\n                                    href=\"#\"\r\n                                    id={\"navbarDropdown\" + char}\r\n                                    role=\"button\"\r\n                                    data-bs-toggle=\"dropdown\"\r\n                                    aria-expanded=\"false\"\r\n                                >\r\n                                    Inventário\r\n                                </a>\r\n                                <PlayerInventory\r\n                                    char={char}\r\n                                    playerInventory={this.props.playerInventory}\r\n                                    shopInventory={this.props.shopInventory}\r\n                                />\r\n                            </li>\r\n\r\n                            <li className=\"nav-item\" key=\"coins\">\r\n                                <a\r\n                                    className=\"nav-link\"\r\n                                    href=\"#\">\r\n                                    <img src=\"images/coin.png\" alt=\"coins\"/> &nbsp; x &nbsp;\r\n                                    <span id={playerChar + \"Coins\"}>\r\n                                        {this.props.coins}\r\n                                    </span>\r\n                                </a>\r\n                            </li>\r\n\r\n                            <li className=\"nav-item\" key=\"mapPieces\">\r\n                                <a\r\n                                    className=\"nav-link\"\r\n                                    href=\"#\"\r\n                                >\r\n                                    <img src=\"images/map_icon.png\"/>\r\n                                    &nbsp; x &nbsp;\r\n                                    <span id={playerChar + \"Map\"}>\r\n                                        {this.props.mapPieces}\r\n                                    </span>\r\n                                </a>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nfunction PlayerStatuses(props) {\r\n\r\n    let playerA = props.players.A;\r\n    let playerB = props.players.B;\r\n\r\n    return (\r\n        <div id=\"playerStatuses\">\r\n            <div id=\"playerStatusesRow\">\r\n                <PlayerStatus\r\n                    character=\"A\"\r\n                    name={playerA.name}\r\n                    lives={playerA.lives}\r\n                    coins={playerA.coins}\r\n                    mapPieces={playerA.mapPieces}\r\n                    playerInventory={playerA.inventory}\r\n                    shopInventory={props.shopInventory}\r\n                    belongsToCurrentPlayer={props.currentPlayer === \"A\"}\r\n                />\r\n                <PlayerStatus\r\n                    character=\"B\"\r\n                    name={playerB.name}\r\n                    lives={playerB.lives}\r\n                    coins={playerB.coins}\r\n                    mapPieces={playerB.mapPieces}\r\n                    playerInventory={playerB.inventory}\r\n                    shopInventory={props.shopInventory}\r\n                    belongsToCurrentPlayer={props.currentPlayer === \"B\"}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nclass GameWizard extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentStep: 1,\r\n        };\r\n\r\n    }\r\n\r\n    finish() {\r\n        this.props.onFinish();\r\n        this.setState({currentStep: 1})\r\n    }\r\n\r\n    async onDiceThrow(diceValue) {\r\n        this.props.onDiceThrow(diceValue);\r\n        await new Promise(resolve => setTimeout(resolve, 500 + diceValue * 400));\r\n        this.setState({currentStep: \"question\"});\r\n    }\r\n\r\n    onAnswerSelection(reward) {\r\n        this.props.onAnswerSelection(reward);\r\n    }\r\n\r\n    onAnswerFeedbackExit() {\r\n        this.setState({currentStep: 4});\r\n    }\r\n\r\n    onShopExit() {\r\n        if (this.props.currentPlayer.task) {\r\n            this.setState({currentStep: 5});\r\n\r\n        } else {\r\n            this.finish()\r\n        }\r\n    }\r\n\r\n    onTaskCompletion() {\r\n        this.props.onTaskCompletion();\r\n        if (this.props.currentPlayer.chest) {\r\n            this.setState({currentStep: 6});\r\n\r\n        } else {\r\n            this.finish()\r\n        }\r\n    }\r\n\r\n    onChestCompletion(skipped, hasNecessaryItems) {\r\n        if (!skipped)\r\n            this.props.onChestCompletion(hasNecessaryItems);\r\n        this.finish();\r\n    }\r\n\r\n    render() {\r\n        let bgClass = (this.props.currentPlayer.char === \"A\") ? \"bg-danger\" : \"bg-primary\";\r\n        if (this.props.winner) bgClass = {\"A\": \"bg-danger\", \"B\": \"bg-primary\"}[this.props.winner.character];\r\n        if (this.props.winner && this.state.currentStep !== -1) this.setState({currentStep: -1});\r\n        let componentToRender;\r\n        switch (this.state.currentStep) {\r\n            case -1:\r\n                componentToRender =\r\n                    <div id=\"gameSummaryDiv\">\r\n                        <img src={`/images/winner${this.props.winner.character}.png`} draggable=\"false\" alt=\"vencedor\"/>\r\n                        <h1>{this.props.winner.name} ganhou!</h1>\r\n                        <h2>Parabéns!</h2>\r\n                    </div>;\r\n                break;\r\n\r\n            case 1:\r\n                componentToRender =\r\n                    <Dice\r\n                        currentPlayerName={this.props.currentPlayer.name}\r\n                        onThrow={(diceValue) => this.onDiceThrow(diceValue)}\r\n                    />;\r\n                break;\r\n\r\n            case \"question\":\r\n                componentToRender =\r\n                    <QuestionWizard\r\n                        onAnswerSelection={(reward) => this.onAnswerSelection(reward)}\r\n                        onAnswerFeedbackExit={() => this.onAnswerFeedbackExit()}\r\n                    />;\r\n                break;\r\n\r\n            case 4:\r\n                componentToRender =\r\n                    <Shop\r\n                        onItemSale={(itemName, itemPrice) => this.props.onItemSale(itemName, itemPrice)}\r\n                        inventory={this.props.shopInventory}\r\n                        currentPlayerCoins={this.props.currentPlayer.coins}\r\n                        onExit={() => this.onShopExit()}\r\n                    />;\r\n                break;\r\n\r\n            case 5:\r\n                componentToRender =\r\n                    <Task\r\n                        conditionsForCompletion={{\r\n                            canCompleteTask: this.props.currentPlayer.task.canCompleteTask,\r\n                            hasNecessaryItem: this.props.currentPlayer.task.hasNecessaryItem\r\n                        }}\r\n                        details={this.props.currentPlayer.task}\r\n                        onCompletion={() => this.onTaskCompletion()}\r\n                    />;\r\n                break;\r\n\r\n            case 6:\r\n                componentToRender =\r\n                    <Chest\r\n                        details={this.props.currentPlayer.chest}\r\n                        keys={this.props.currentPlayer.keys}\r\n                        onKeySelection={(keyName) => this.props.onChestKeySelection(keyName)}\r\n                        hasHazardItems={this.props.currentPlayer.hasHazardItems}\r\n                        onCompletion={(skipped, hasHazardItems) => this.onChestCompletion(skipped, hasHazardItems)}\r\n                    />;\r\n                break;\r\n\r\n                default:\r\n                componentToRender = null;\r\n        }\r\n        return (\r\n            <Draggable\r\n                bounds={\"parent\"}\r\n            >\r\n                <div\r\n                    id=\"footer\"\r\n                    className={`d-flex flex-column ${bgClass}`}\r\n                >\r\n                    {/*<img id=\"logoSmall\" src=\"images/logo_horizontal.png\" height=\"70px\"/>*/}\r\n                    {componentToRender}\r\n                </div>\r\n            </Draggable>\r\n        );\r\n    }\r\n}\r\n\r\nclass Dice extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            value: 1\r\n        }\r\n    }\r\n\r\n    async shuffle(diceValue) {\r\n        document.getElementById(\"diceButton\").disabled = true;\r\n        for (let i = 0; i < 15; i++) {\r\n            document.getElementById(\"diceImageId\").src = \"images/dice\" + (Math.ceil(Math.random() * 6)) + \".png\";\r\n            await new Promise(resolve => setTimeout(resolve, 100 + i * 20));\r\n        }\r\n        document.getElementById(\"diceImageId\").src = \"images/dice\" + diceValue + \".png\";\r\n        await new Promise(resolve => setTimeout(resolve, 2000));\r\n    }\r\n\r\n    async throw() {\r\n        let newValue = Math.ceil(Math.random() * 6);\r\n        // TODO: DEBUG DEBUG\r\n        newValue = 11;\r\n        await this.shuffle(newValue);\r\n        this.setState({value: newValue});\r\n        this.props.onThrow(newValue);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"diceDiv\">\r\n                <h3 id=\"currentPlayerNameH1\">{this.props.currentPlayerName}</h3>\r\n                <img id=\"diceImageId\" src={\"images/dice\" + this.state.value + \".png\"} alt=\"dice\" height=\"64px\"/>\r\n                <br/><br/>\r\n                <button\r\n                    id=\"diceButton\"\r\n                    className=\"btn-outline-light btn\"\r\n                    onClick={() => this.throw()}\r\n                >\r\n                    Lançar\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass QuestionWizard extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentStep: \"difficultySelection\",\r\n            difficultyLevel: null,\r\n            reward: null,\r\n        }\r\n    }\r\n\r\n    onDifficultySelection(difficultyLevel) {\r\n        this.setState({currentStep: \"answerSelection\", difficultyLevel: difficultyLevel});\r\n    }\r\n\r\n    onAnswerSelection(reward) {\r\n        this.props.onAnswerSelection(reward);\r\n        this.setState({currentStep: \"answerFeedback\", reward: reward});\r\n    }\r\n\r\n    render() {\r\n        let componentToRender;\r\n        switch (this.state.currentStep) {\r\n            case \"difficultySelection\":\r\n                componentToRender =\r\n                    <DifficultySelector\r\n                        onDifficultySelection={(difficultyLevel) => this.onDifficultySelection(difficultyLevel)}\r\n                    />;\r\n                break;\r\n\r\n            case \"answerSelection\":\r\n                componentToRender =\r\n                    <Question\r\n                        onAnswerSelection={(reward) => this.onAnswerSelection(reward)}\r\n                        difficultyLevel={this.state.difficultyLevel}\r\n                    />;\r\n                break;\r\n\r\n            case \"answerFeedback\":\r\n                componentToRender =\r\n                    <AnswerFeedback\r\n                        reward={this.state.reward}\r\n                        onExit={() => this.props.onAnswerFeedbackExit()}\r\n                    />\r\n        }\r\n\r\n        return componentToRender\r\n    }\r\n}\r\n\r\nclass AnswerFeedback extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"answerFeedback\">\r\n                <br/>\r\n                <h2 id=\"answerRightWrong\">{`A resposta está ${(this.props.reward > 0) ? \"certa\" : \"errada\"}!`}</h2>\r\n                <h5 id=\"livesLost\">{(this.props.reward === 0) ?\r\n                    \"Perdeu uma vida!\" :\r\n                    <span> Ganhou {this.props.reward} <img src=\"images/coin.png\"/></span>\r\n                }\r\n                </h5>\r\n                <button\r\n                    id=\"exitAnswerFeedbackButton\"\r\n                    className=\"btn btn-outline-light\"\r\n                    onClick={this.props.onExit}\r\n                >\r\n                    Avançar\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass DifficultySelector extends React.Component {\r\n\r\n    selectDifficulty(difficultyLevel) {\r\n        this.props.onDifficultySelection(difficultyLevel);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"difficultySelector\">\r\n                <h4>Selecione a dificuldade da pergunta:</h4>\r\n                <br/>\r\n                <div className=\"d-flex flex-column justify-content-center\">\r\n                    {\r\n                        [\r\n                            {className: \"bg-success\", difficultyName: \"fácil\"},\r\n                            {className: \"bg-warning\", difficultyName: \"média\"},\r\n                            {className: \"bg-danger\", difficultyName: \"difícil\"}\r\n                        ].map((buttonProps, index) => (\r\n                            <button\r\n                                id={\"difficulty\" + (index + 1) + \"Button\"}\r\n                                className={\"difficultyButton mx-auto btn-outline-light btn \" + buttonProps.className}\r\n                                onClick={() => this.selectDifficulty(index + 1)}\r\n                            >\r\n                                {buttonProps.difficultyName}\r\n                            </button>\r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Question extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            image: null,\r\n            questionText: null,\r\n            rightAnswer: null,\r\n            wrongAnswers: [null, null, null]\r\n        };\r\n    }\r\n\r\n    selectAnswer(answer) {\r\n        if (answer === this.state.rightAnswer) this.props.onAnswerSelection(this.props.difficultyLevel);\r\n        else this.props.onAnswerSelection(0);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let response = await fetch(\"http://127.0.0.1:8000/api/questions/random/\" + this.props.difficultyLevel)\r\n            .then(response => response.json());\r\n        this.setState(response.data)\r\n    }\r\n\r\n    render() {\r\n        let answers = this.state.wrongAnswers\r\n            .concat([this.state.rightAnswer])\r\n            .sort(() => Math.random() - 0.5)\r\n            .map((answer, index) =>\r\n                <button\r\n                    id={\"answerButton\" + index}\r\n                    className=\"answerButton btn-outline-light btn\"\r\n                    onClick={() => this.selectAnswer(answer)}\r\n                >\r\n                    {answer}\r\n                </button>\r\n            );\r\n        answers.splice(2, 0, <br/>);\r\n        return (\r\n            <div id=\"answerSelector\">\r\n                <div\r\n                    id=\"questionImageDiv\"\r\n                    style={{backgroundImage: `url(${this.state.image})`\r\n                    }}\r\n                >\r\n                </div>\r\n                <br/>\r\n                <h5 id=\"questionText\">{this.state.questionText}</h5>\r\n                {/****************************************************************************************************/}\r\n                {answers}\r\n                {/****************************************************************************************************/}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nclass Shop extends React.Component {\r\n\r\n    sellItem(itemName, itemPrice) {\r\n        this.props.onItemSale(itemName, itemPrice)\r\n    }\r\n\r\n    exit() {\r\n        this.props.onExit()\r\n    }\r\n\r\n    render() {\r\n        let inventory = Object.values(this.props.inventory).filter(item => (item.name != null));\r\n\r\n        return (\r\n            <div id=\"shop\">\r\n                <h2 id=\"shopHeader\">Loja</h2>\r\n                <div id=\"shopTableWrapper\" className=\"table-responsive\">\r\n                    <table id=\"shopTable\">\r\n                        <thead>\r\n                        <tr>\r\n                            <th>Item</th>\r\n                            <th>Preço</th>\r\n                            <th></th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody id=\"shopTableBody\">\r\n                        {/********************************************************************************************/}\r\n                        {inventory.map((item, index) =>\r\n                            <tr>\r\n                                <td id=\"item1Name\">\r\n                                    <img className=\"shopItemImg\" src={\"./images/shop/\" + item.image}/>&nbsp;\r\n                                    {item.name}\r\n                                </td>\r\n                                <td id={\"item\" + index + \"Price\"}>\r\n                                    {item.price}\r\n                                    &nbsp;<img src=\"images/coin.png\" height=\"25\"/></td>\r\n                                <td>\r\n                                    <div className=\"input-group\">\r\n                                        <button\r\n                                            id={\"item\" + index + \"Button\"}\r\n                                            className=\"btn btn-outline-light purchaseButton\"\r\n                                            disabled={item.price > this.props.currentPlayerCoins}\r\n                                            onClick={() => this.sellItem(item.name, item.price)}\r\n                                        >\r\n                                            Comprar\r\n                                        </button>\r\n                                    </div>\r\n                                </td>\r\n                            </tr>\r\n                        )}\r\n                        {/********************************************************************************************/}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <div id=\"shopFooter\">\r\n                    <button\r\n                        id=\"exitShopButton\"\r\n                        className=\"btn btn-outline-light\"\r\n                        onClick={() => this.exit()}\r\n                    >\r\n                        Sair da loja\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Task extends React.Component {\r\n\r\n    render() {\r\n\r\n        let message = \"Não tem as condições necessárias para executar a tarefa. Terá de fazer trabalho comunitário.\";\r\n        let canCompleteTask = this.props.conditionsForCompletion.canCompleteTask;\r\n        let hasNecessaryItem = this.props.conditionsForCompletion.hasNecessaryItem;\r\n\r\n        if (canCompleteTask) {\r\n            if (hasNecessaryItem)\r\n                message = \"Será gasto 1 \" + this.props.details.necessaryItemName + \" do seu inventário.\";\r\n            else\r\n                message = \"Não tem o item necessário no seu inventário, mas pode comprá-lo.\";\r\n        }\r\n\r\n\r\n        return (\r\n            <div id=\"taskDiv\">\r\n                <h3>Tarefa</h3>\r\n                <h3 id=\"taskSelectorDescription\">{this.props.details.taskDescription}</h3>\r\n                <h6 id=\"taskNecessaryItem\">{this.props.details.necessaryItemName}</h6>\r\n                <h6 id=\"taskItemCost\">\r\n                    Preço: {this.props.details.necessaryItemPrice}\r\n                    &nbsp;\r\n                    <img src=\"images/coin.png\" height=\"25\"/>\r\n                </h6>\r\n                <p id=\"taskConditions\">{message}</p>\r\n                <button\r\n                    id=\"taskContinueButton\"\r\n                    className=\"btn btn-outline-light\"\r\n                    onClick={() => this.props.onCompletion()}\r\n                >\r\n                    Continuar\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Chest extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            currentStep: 1,\r\n            skipped: false,\r\n            success: false,\r\n        }\r\n    }\r\n\r\n    onKeySelection(keyName) {\r\n        this.setState({\r\n            currentStep: 2,\r\n            success: this.props.onKeySelection(keyName)\r\n        })\r\n    }\r\n\r\n    onSkipKeySelection() {\r\n        this.setState({\r\n            currentStep: 2,\r\n            success: this.props.onKeySelection(null),\r\n            skipped: true\r\n        })\r\n    }\r\n\r\n    onSkipFeedback() {\r\n        if (!this.state.skipped)\r\n            this.setState({currentStep: 3});\r\n        else this.props.onCompletion(this.state.skipped)\r\n    }\r\n\r\n    onSkipHazard() {\r\n        this.props.onCompletion(this.state.skipped, this.props.hasHazardItems);\r\n    }\r\n\r\n    render() {\r\n        let componentToRender;\r\n        switch (this.state.currentStep) {\r\n            case 1:\r\n                componentToRender =\r\n                <div id=\"chestDiv\">\r\n                    <h2 id=\"chestDialogue\">Descobriu um cofre!</h2>\r\n                    <h5 id=\"chestSubDialogue\">{(this.props.keys.length === 0) ?\r\n                        \"Mas não tem nenhuma chave...\" :\r\n                        \"Escolha uma chave:\"}</h5>\r\n\r\n                    <div className=\"btn-group-vertical\" role=\"group\">\r\n                        {this.props.keys.map((key) =>\r\n                            <button\r\n                                id={`${key.name.replace(/\\s/g, '')}Button`}\r\n                                className=\"btn btn-outline-light keyButton\"\r\n                                onClick={() => this.onKeySelection(key.name)}\r\n                            >\r\n                                <img src={`images/shop/${key.image}`} />\r\n                                Usar {key.name}\r\n                            </button>\r\n                        )}\r\n                    </div>\r\n                    <br/>\r\n                    <button\r\n                        id=\"chestContinueButton\"\r\n                        className=\"btn btn-outline-light\"\r\n                        onClick={() => this.onSkipKeySelection()}\r\n                    >\r\n                        Abandonar o cofre\r\n                    </button>\r\n                </div>;\r\n                break;\r\n            case 2:\r\n                componentToRender =\r\n                    <div id=\"chestFeedbackDiv\">\r\n                        <br/>\r\n                        <h4 id=\"chestFeedbackP\">\r\n                            {\r\n                                (this.state.skipped) ?\r\n                                    \"Voltou ao ponto de partida, deixando o cofre por abrir.\":\r\n                                    (this.state.success) ?\r\n                                        \"Abriu o cofre e recuperou uma parte do mapa!\" :\r\n                                        \"Chave errada!...\"\r\n                            }\r\n                        </h4>\r\n                        <h5>\r\n                            {\r\n                                (this.state.skipped) ?\r\n                                    \"Perdeu uma vida.\":\r\n                                    (this.state.success) ?\r\n                                        \"Obtenha 3 para vencer.\" :\r\n                                        \"Perdeu uma vida.\"\r\n                            }\r\n                        </h5>\r\n                        <br/>\r\n                        <button\r\n                            id=\"chestFeedbackContinueButton\"\r\n                            className=\"btn btn-outline-light\"\r\n                            onClick={() => this.onSkipFeedback()}\r\n                        >\r\n                            Continuar\r\n                        </button>\r\n                    </div>;\r\n                break;\r\n\r\n            case 3:\r\n                componentToRender =\r\n                    <div id=\"chestHazardDiv\">\r\n                        <br/>\r\n                        <h5 id=\"hazardDescriptionP\">{this.props.details.hazard.description}</h5>\r\n                        <h5>Para sobreviver, precisa de:</h5>\r\n                        <ul id=\"hazardItemsUl\">\r\n                            {this.props.details.hazard.necessaryItems.map((necessaryItem) =>\r\n                                <li key={necessaryItem}>{necessaryItem}</li>\r\n                            )}\r\n                        </ul>\r\n                        <p id=\"hazardFeedbackP\">{(this.props.hasHazardItems) ?\r\n                            \"Tendo todos os items necessários, conseguiu sobreviver!\" :\r\n                            \"Não tem os items necessários para sobreviver... Perdeu o jogo!\"\r\n                        }</p>\r\n                        <button\r\n                            id=\"hazardContinueButton\"\r\n                            className=\"btn-outline-light btn\"\r\n                            onClick={() => this.onSkipHazard()}\r\n                        >\r\n                            Continuar...\r\n                        </button>\r\n                    </div>;\r\n                break;\r\n\r\n                default:\r\n                componentToRender = <p>Não devia ver isto</p>;\r\n        }\r\n\r\n        return (\r\n            componentToRender\r\n        );\r\n    }\r\n}\r\n\r\nclass Toast extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {display: true}\r\n    }\r\n\r\n    close() {\r\n        this.setState({display: false})\r\n    }\r\n\r\n    render() {\r\n        // TODO: toast toast toast\r\n        return (\r\n            <Draggable>\r\n            <div\r\n                id={this.props.id}\r\n                role=\"alert\"\r\n                aria-live=\"assertive\"\r\n                aria-atomic=\"true\"\r\n                className={(this.props.currentPlayer === \"A\") ? \"bg-danger\" : \"bg-primary\"}\r\n                style={{display: (this.state.display) ? \"block\" : \"none\"}}\r\n            >\r\n                <div className=\"toast-header\">\r\n                    <strong className=\"me-auto\">{this.props.title}</strong>\r\n                    <strong id=\"tileName\">{this.props.subtitle}</strong>\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn-close bg-light\"\r\n                        data-bs-dismiss=\"toast\"\r\n                        aria-label=\"Close\"\r\n                        id=\"hideTaskToastButton\"\r\n                        onClick={() => this.close()}\r\n                    >\r\n                    </button>\r\n                </div>\r\n                <div className=\"toast-body text-center\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>\r\n            </Draggable>\r\n        );\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentPlayer: \"A\",\r\n            lastDiceValue: 0,\r\n\r\n            playerAName: \"Vermelho\",\r\n            playerALives: 5,\r\n            playerACoins: 50,\r\n            playerAMapPieces: 0,\r\n            playerACurrentTile: 1,\r\n            playerAInventory: {},\r\n            playerACommunityWork: false,\r\n\r\n            playerBName: \"Azul\",\r\n            playerBLives: 5,\r\n            playerBCoins: 50,\r\n            playerBMapPieces: 0,\r\n            playerBCurrentTile: 1,\r\n            playerBInventory: {},\r\n            playerBCommunityWork: false\r\n        }\r\n    }\r\n\r\n    movePlayerForward(playerCharacter, steps) {\r\n        let currentPlayer = \"player\" + playerCharacter;\r\n        steps = (this.state[`${currentPlayer}CommunityWork`]) ? 0 : steps;\r\n        this.setState({\r\n            [currentPlayer + \"CurrentTile\"]: (this.state[currentPlayer + \"CurrentTile\"] + steps - 1) % 50 + 1,\r\n            lastDiceValue: steps\r\n        });\r\n    }\r\n\r\n    rewardOrPunishPlayer(playerCharacter, rewardedCoins) {\r\n        let currentPlayer = \"player\" + this.state.currentPlayer;\r\n        let lives = this.state[currentPlayer + \"Lives\"];\r\n        let coins = this.state[currentPlayer + \"Coins\"];\r\n        let communityWork = this.state[currentPlayer + \"CommunityWork\"];\r\n        if (rewardedCoins === 0) lives--;\r\n        else {\r\n            if (communityWork) {\r\n                communityWork = false;\r\n            }\r\n            else\r\n                coins += rewardedCoins;\r\n        }\r\n        this.setState({\r\n            [`${currentPlayer}Lives`]: lives,\r\n            [`${currentPlayer}Coins`]: coins,\r\n            [`${currentPlayer}CommunityWork`]: communityWork,\r\n\r\n        });\r\n    }\r\n\r\n    addItemToPlayerInventory(playerCharacter, itemName, itemPrice) {\r\n        let player = \"player\" + playerCharacter;\r\n        let inventoryName = player + \"Inventory\";\r\n        let inventory = this.state[inventoryName];\r\n        let quantity = (itemName in inventory) ? inventory[itemName] + 1 : 1;\r\n\r\n        this.setState({\r\n            [player+\"Coins\"]: this.state[player+\"Coins\"] - itemPrice,\r\n            [inventoryName]: {...inventory, [itemName]: quantity}\r\n        });\r\n    }\r\n\r\n    switchPlayer() {\r\n        this.setState({ currentPlayer: (this.state.currentPlayer === \"B\")? \"A\" : \"B\" })\r\n    }\r\n\r\n    getTaskDetails(currentPlayerInTaskTile) {\r\n        if (currentPlayerInTaskTile) {\r\n            let task = this.props.taskTiles[this.state[\"player\"+this.state.currentPlayer+\"CurrentTile\"]];\r\n            let price = this.props.shopInventory[task.necessaryItemName].price;\r\n            let hasNecessaryItem = (task.necessaryItemName in this.state[`player${this.state.currentPlayer}Inventory`]);\r\n            return {\r\n                ...task,\r\n                necessaryItemPrice: price,\r\n                hasNecessaryItem,\r\n                canCompleteTask: (hasNecessaryItem || price <= this.state[`player${this.state.currentPlayer}Coins`])\r\n            };\r\n        } else\r\n            return this.props.taskTiles.null;\r\n\r\n    }\r\n\r\n    checkIfPlayerHasHazardItems(currentPlayerInChestTile) {\r\n        if (currentPlayerInChestTile) {\r\n\r\n            return this.props.chestTiles[this.state[`player${this.state.currentPlayer}CurrentTile`]].hazard.necessaryItems\r\n                .every((item) => Object.keys(this.state[`player${this.state.currentPlayer}Inventory`]).includes(item));}\r\n        else return null;\r\n    }\r\n\r\n    getConditionsForTaskCompletion(currentPlayerInTaskTile) {\r\n        if (currentPlayerInTaskTile){\r\n            let currentPlayer = \"player\"+this.state.currentPlayer;\r\n            let necessaryItemName = this.props.taskTiles[this.state[currentPlayer + \"CurrentTile\"]].necessaryItemName;\r\n            let necessaryItemPrice = this.props.shopInventory[necessaryItemName].price;\r\n            let currentPlayerInventory = this.state[currentPlayer + \"Inventory\"];\r\n            let currentPlayerCoins = this.state[currentPlayer + \"Coins\"];\r\n            let hasNecessaryItem = (necessaryItemName in currentPlayerInventory);\r\n            return{\r\n                hasNecessaryItem: hasNecessaryItem,\r\n                canCompleteTask: (hasNecessaryItem || necessaryItemPrice <= currentPlayerCoins)\r\n            };\r\n        } else\r\n            return null;\r\n\r\n    }\r\n\r\n    consumeItem(playerChar, itemName) {\r\n        let playerInventory = this.state[`player${playerChar}Inventory`];\r\n        console.log(playerInventory);\r\n        let newPlayerInventory = {\r\n            ...playerInventory,\r\n            [itemName]: playerInventory[itemName] - 1\r\n        };\r\n        console.log(newPlayerInventory);\r\n        if (newPlayerInventory[itemName] === 0) { console.log(itemName);\r\n            delete newPlayerInventory[itemName];}\r\n        this.setState({[`player${playerChar}Inventory`]: newPlayerInventory});\r\n    }\r\n\r\n    completeTask(playerChar) {\r\n        let player = \"player\" + playerChar;\r\n\r\n        let conditions = this.getConditionsForTaskCompletion(true);\r\n        let details = this.getTaskDetails(true);\r\n\r\n        if (conditions.hasNecessaryItem) {\r\n            this.consumeItem(playerChar, details.necessaryItemName);\r\n        }\r\n\r\n        else if (conditions.canCompleteTask) {\r\n            this.setState(\r\n                {\r\n                    [player + \"Coins\"]: this.state[player + \"Coins\"] - details.necessaryItemPrice\r\n                }\r\n            );\r\n        }\r\n\r\n        else\r\n            this.setState({[player + \"CommunityWork\"]: true});\r\n    }\r\n\r\n    getKeysFromPlayerInventory(playerChar) {\r\n        return Object.keys(this.state[`player${playerChar}Inventory`])\r\n            .filter((itemName) => itemName.includes(\"Chave\"))\r\n            .map((itemName) => (\r\n                {\r\n                    name: itemName,\r\n                    image: this.props.shopInventory[itemName].image,\r\n                }));\r\n    }\r\n\r\n    selectKey(playerChar, keyName) {\r\n        let success = (keyName === this.props.chestTiles[this.state[`player${playerChar}CurrentTile`]].chest.key);\r\n\r\n        if (success){\r\n            this.consumeItem(playerChar, keyName);\r\n            this.setState({[`player${playerChar}MapPieces`]: this.state[`player${playerChar}MapPieces`] + 1});\r\n        }\r\n        else\r\n            this.setState({[`player${playerChar}Lives`]: this.state[`player${playerChar}Lives`] - 1});\r\n\r\n        return success;\r\n    }\r\n\r\n    consumeItemsOrKill(playerChar, hasNecessaryItems) {\r\n        if (hasNecessaryItems)\r\n            this.props.chestTiles[this.state[`player${playerChar}CurrentTile`]].hazard.necessaryItems\r\n            .forEach((item) => {this.consumeItem(playerChar, item)});\r\n        else\r\n            this.setState({[`player${playerChar}Lives`]: 0});\r\n    }\r\n\r\n    render() {\r\n        let players = {\r\n            \"A\": {\r\n                name: this.state.playerAName,\r\n                lives: this.state.playerALives,\r\n                coins: this.state.playerACoins,\r\n                mapPieces: this.state.playerAMapPieces,\r\n                currentTile: this.state.playerACurrentTile,\r\n                inventory: this.state.playerAInventory\r\n            },\r\n            \"B\": {\r\n                name: this.state.playerBName,\r\n                lives: this.state.playerBLives,\r\n                coins: this.state.playerBCoins,\r\n                mapPieces: this.state.playerBMapPieces,\r\n                currentTile: this.state.playerBCurrentTile,\r\n                inventory: this.state.playerBInventory\r\n            },\r\n        };\r\n        let currentPlayer = \"player\"+this.state.currentPlayer;\r\n        let currentPlayerTile = this.state[currentPlayer + \"CurrentTile\"];\r\n        let currentPlayerInTaskTile = (currentPlayerTile  in this.props.taskTiles);\r\n        let currentPlayerInChestTile = (currentPlayerTile in this.props.chestTiles);\r\n\r\n        return (\r\n            <div id=\"gameDiv\" style={{display: \"block\"}}>\r\n                <div id=\"header\">\r\n                    {/*<nav className=\"navbar navbar-light bg-light\" id=\"gloriaHeader\">\r\n                        <div className=\"container-fluid\">\r\n                            <img id=\"logoSmall\" src=\"images/logo_horizontal.png\" height=\"70px\"/>\r\n                        </div>\r\n                    </nav>*/}\r\n                    <PlayerStatuses\r\n                        players={players}\r\n                        currentPlayer={this.state.currentPlayer}\r\n                        shopInventory={this.props.shopInventory}\r\n                    />\r\n                </div>\r\n                <Board\r\n                    numberOfTiles={50}\r\n                    taskTiles={this.props.taskTiles}\r\n                    chestTiles={this.props.chestTiles}\r\n                    normalTileImages={this.props.normalTileImages}\r\n                    playerATile={this.state.playerACurrentTile}\r\n                    playerBTile={this.state.playerBCurrentTile}\r\n                    lastDiceValue={this.state.lastDiceValue}\r\n                />\r\n                    {/*<div id=\"dummyFooter\"/>*/}\r\n\r\n                <GameWizard\r\n                    winner={\r\n                        (this.state.playerALives === 0 || this.state.playerBMapPieces === 3) ?\r\n                            {character: \"B\", name: this.state.playerBName} :\r\n                            (this.state.playerBLives === 0 || this.state.playerAMapPieces === 3) ?\r\n                                {character: \"A\", name: this.state.playerAName} :\r\n                                null\r\n                    }\r\n\r\n                    currentPlayer={{\r\n                        name: this.state[`${currentPlayer}Name`],\r\n                        char: this.state.currentPlayer,\r\n                        coins: this.state[`${currentPlayer}Coins`],\r\n                        keys: this.getKeysFromPlayerInventory(this.state.currentPlayer),\r\n                        communityWork: this.state[`${currentPlayer}CommunityWork`],\r\n                        task: this.getTaskDetails(currentPlayerInTaskTile),\r\n                        chest: {\r\n                            ...this.props.chestTiles[currentPlayerTile],\r\n                            hasHazardItems: this.checkIfPlayerHasHazardItems(currentPlayerInChestTile)\r\n                        }\r\n                    }}\r\n\r\n                    shopInventory={this.props.shopInventory}\r\n\r\n\r\n                    onDiceThrow={\r\n                        (steps) => this.movePlayerForward(this.state.currentPlayer, steps)}\r\n                    onAnswerSelection={\r\n                        (reward) => this.rewardOrPunishPlayer(this.state.currentPlayer, reward)}\r\n                    onItemSale={\r\n                        (itemName, itemPrice) =>\r\n                            this.addItemToPlayerInventory(this.state.currentPlayer, itemName, itemPrice)}\r\n                    onFinish={\r\n                        () => this.switchPlayer()}\r\n                    onTaskCompletion={\r\n                        () => this.completeTask(this.state.currentPlayer)}\r\n                    onChestKeySelection={\r\n                        (keyName) => this.selectKey(this.state.currentPlayer, keyName)}\r\n                    onChestCompletion={\r\n                        (hasNecessaryItems) => this.consumeItemsOrKill(this.state.currentPlayer, hasNecessaryItems)\r\n                    }\r\n                />\r\n\r\n                {(this.state[`${currentPlayer}CommunityWork`]) ?\r\n                    <Toast\r\n                        id=\"communityWorkToast\"\r\n                        title=\"Trabalho comunitário\"\r\n                        subtitle={null}\r\n                        display={this.state[`${currentPlayer}CommunityWork`]}\r\n                        currentPlayer={this.state.currentPlayer}\r\n                    >\r\n                        <p id=\"communityWorkDescription\">\r\n                            Só pode voltar a avançar se responder corretamente a uma pergunta.\r\n                        </p>\r\n                    </Toast>\r\n                    :\r\n                    null\r\n                }\r\n\r\n                {(currentPlayerInTaskTile) ?\r\n                    <Toast\r\n                        id=\"taskToast\"\r\n                        title=\"Tarefa\"\r\n                        subtitle={this.getTaskDetails(currentPlayerInTaskTile).location}\r\n                        currentPlayer={this.state.currentPlayer}\r\n                    >\r\n                        <p id=\"taskDescription\">{this.getTaskDetails(currentPlayerInTaskTile).taskDescription}</p>\r\n                        <h6>\r\n                            <b>Item necessário:</b><br/>\r\n                            <img src={`images/shop/${this.props.shopInventory[this.getTaskDetails(currentPlayerInTaskTile).necessaryItemName].image}`}/>\r\n                            &nbsp;\r\n                            {this.getTaskDetails(currentPlayerInTaskTile).necessaryItemName}\r\n                            <br/>\r\n                            <img src=\"images/coin.png\" height=\"25px\" />\r\n                            &nbsp; x &nbsp;\r\n                            {this.props.shopInventory[this.getTaskDetails(currentPlayerInTaskTile).necessaryItemName].price}\r\n                        </h6>\r\n                    </Toast>\r\n                :\r\n                    null\r\n                }\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// ========================================\r\n\r\nlet chestTiles = {\r\n    \"12\": {\r\n        chest: {\r\n            key: \"Chave Azul\",\r\n            image: \"cofreAzul.png\"\r\n        },\r\n        hazard: {\r\n            description: \"Ocorre um tempestade, com mar alteroso, o que impede que o barco chegue na altura prevista...\",\r\n            necessaryItems: [\"Garrafa de água\", \"Protetor solar\"]\r\n        }\r\n    },\r\n    \"25\": {\r\n        chest: {\r\n            key: \"Chave Vermelha\",\r\n            image: \"cofreVermelho.png\"\r\n        },\r\n        hazard: {\r\n            description: \"O ar torna-se irrespirável...\",\r\n            necessaryItems: [\"Máscara\", \"Garrafa de água\", \"Corda\"]\r\n        }\r\n    },\r\n    \"49\": {\r\n        chest: {\r\n            key: \"Chave Verde\",\r\n            image: \"cofreVerde.png\"\r\n        },\r\n        hazard: {\r\n            description: \"Ocorre um sismo, o que dificulta imenso a descida...\",\r\n            necessaryItems: [\"Corda\"]\r\n        }\r\n    }\r\n};\r\n\r\nlet chests = Object.values(chestTiles)\r\n    .map((chestDescObj) => chestDescObj.chest)\r\n    .sort(() => Math.random() - 0.5);\r\nObject.keys(chestTiles).forEach((tileNumber) => chestTiles[tileNumber].chest = chests.pop());\r\n\r\n\r\n\r\nReactDOM.render(\r\n    <Game\r\n        shopInventory={require(\"./shop.json\")}\r\n        taskTiles={\r\n            {\r\n                6: {\r\n                    backgroundImage: 'tile_santamaria.png',\r\n                    taskDescription: \"Fazer uma viagem de barco para ver baleias.\",\r\n                    necessaryItemName: \"Bilhete: Whale watching\",\r\n                    location: \"Santa Maria\"\r\n                },\r\n                12: {\r\n                    backgroundImage: 'tile_vilafranca.png',\r\n                    taskDescription: \"Viajar até ao ilhéu de Vila Franca\",\r\n                    necessaryItemName: \"Bilhete: Ilhéu de Vila Franca\",\r\n                    location: \"São Miguel\"\r\n                },\r\n                18: {\r\n                    backgroundImage: 'tile_terceira.png',\r\n                    taskDescription: \"Assistir a uma tourada à corda.\",\r\n                    necessaryItemName: \"Bilhete: Tourada à corda\",\r\n                    location: \"Terceira\"\r\n                },\r\n                25: {\r\n                    backgroundImage: 'tile_furnadoenxofre.png',\r\n                    taskDescription: \"Visitar a furna do enxofre\",\r\n                    necessaryItemName: \"Bilhete: Furna do Enxofre\",\r\n                    location: \"Graciosa\"\r\n                },\r\n                33: {\r\n                    backgroundImage: 'tile_saojorge.png',\r\n                    taskDescription: \"Fazer uma viagem à Fajã de Santo Cristo.\",\r\n                    necessaryItemName: \"Bilhete: Viagem guiada à Fajã do St.º Cristo\",\r\n                    location: \"São Jorge\"\r\n                },\r\n                40: {\r\n                    backgroundImage: 'tile_flores.png',\r\n                    taskDescription: \"Fazer uma viagem à Rocha dos Bordões.\",\r\n                    necessaryItemName: \"Bilhete: Visita guiada à Rocha dos Bordões\",\r\n                    location: \"Flores\"\r\n                },\r\n                42: {\r\n                    backgroundImage: 'tile_corvo.png',\r\n                    taskDescription: \"Fazer uma viagem à lagoa do Caldeirão.\",\r\n                    necessaryItemName: \"Bilhete: Viagem guiada à Lagoa do Caldeirão\",\r\n                    location: \"Corvo\"\r\n                },\r\n                49: {\r\n                    backgroundImage: 'tile_pico.png',\r\n                    taskDescription: \"Subir à Montanha do Pico\",\r\n                    necessaryItemName: \"Bilhete: Subida à montanha do Pico\",\r\n                    location: \"Pico\"\r\n                },\r\n                null: {\r\n                    backgroundImage: null,\r\n                    taskDescription: null,\r\n                    necessaryItemName: null,\r\n                    location: null,\r\n                    necessaryItemPrice: null,\r\n                    hasNecessaryItem: null,\r\n                    canCompleteTask: null\r\n                }\r\n            }\r\n        }\r\n\r\n        chestTiles={chestTiles}\r\n    />,\r\n    document.getElementById('root')\r\n);\r\n",{"ruleId":"22","severity":1,"message":"23","line":144,"column":33,"nodeType":"24","endLine":144,"endColumn":105},{"ruleId":"25","severity":1,"message":"26","line":172,"column":21,"nodeType":"24","endLine":176,"endColumn":22},{"ruleId":"25","severity":1,"message":"26","line":196,"column":33,"nodeType":"24","endLine":200,"endColumn":34},{"ruleId":"25","severity":1,"message":"26","line":209,"column":33,"nodeType":"24","endLine":216,"endColumn":34},{"ruleId":"25","severity":1,"message":"26","line":227,"column":33,"nodeType":"24","endLine":229,"endColumn":46},{"ruleId":"25","severity":1,"message":"26","line":238,"column":33,"nodeType":"24","endLine":241,"endColumn":34},{"ruleId":"22","severity":1,"message":"23","line":242,"column":37,"nodeType":"24","endLine":242,"endColumn":69},{"ruleId":"27","severity":1,"message":"28","line":495,"column":9,"nodeType":"29","messageId":"30","endLine":517,"endColumn":10},{"ruleId":"22","severity":1,"message":"23","line":532,"column":55,"nodeType":"24","endLine":532,"endColumn":83},{"ruleId":"22","severity":1,"message":"23","line":666,"column":37,"nodeType":"24","endLine":666,"endColumn":103},{"ruleId":"22","severity":1,"message":"23","line":671,"column":43,"nodeType":"24","endLine":671,"endColumn":83},{"ruleId":"22","severity":1,"message":"23","line":728,"column":21,"nodeType":"24","endLine":728,"endColumn":61},{"ruleId":"22","severity":1,"message":"23","line":797,"column":33,"nodeType":"24","endLine":797,"endColumn":73},{"ruleId":"22","severity":1,"message":"23","line":1221,"column":29,"nodeType":"24","endLine":1221,"endColumn":153},{"ruleId":"22","severity":1,"message":"23","line":1225,"column":29,"nodeType":"24","endLine":1225,"endColumn":72},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","default-case","Expected a default case.","SwitchStatement","missingDefaultCase"]